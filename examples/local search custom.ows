<?xml version='1.0' encoding='utf-8'?>
<scheme version="2.0" title="" description="">
	<nodes>
		<node id="0" name="Local Search" qualified_name="StrawberryPlus.metaheuristics.widgets.localsearch_.LocalSearch_widget" project_name="Strawberry-Plus" version="" title="Local Search" position="(453.0, 247.0)" />
		<node id="1" name="Print (String)" qualified_name="StrawberryPlus.utilities.widgets.stringPrint.PrintResults" project_name="Strawberry-Plus" version="" title="Print (String)" position="(635.0, 352.0)" />
		<node id="2" name="Print (String)" qualified_name="StrawberryPlus.utilities.widgets.stringPrint.PrintResults" project_name="Strawberry-Plus" version="" title="Print (String) (1)" position="(630.0, 228.0)" />
		<node id="3" name="Print (String)" qualified_name="StrawberryPlus.utilities.widgets.stringPrint.PrintResults" project_name="Strawberry-Plus" version="" title="Print (String) (2)" position="(620.0, 114.0)" />
		<node id="4" name="Custom Problem in Python - Single-Objective" qualified_name="StrawberryPlus.problems.widgets.custom_single.myCustom_Single" project_name="Strawberry-Plus" version="" title="Custom Problem in Python - Single-Objective" position="(272.0, 245.0)" />
	</nodes>
	<links>
		<link id="0" source_node_id="0" sink_node_id="1" source_channel="Solution" sink_channel="String" enabled="true" />
		<link id="1" source_node_id="0" sink_node_id="3" source_channel="Computing Time" sink_channel="String" enabled="true" />
		<link id="2" source_node_id="0" sink_node_id="2" source_channel="Fitness" sink_channel="String" enabled="true" />
		<link id="3" source_node_id="4" sink_node_id="0" source_channel="Problem" sink_channel="Problem Unconstrained (Single Objective)" enabled="true" />
	</links>
	<annotations>
		<text id="0" type="text/plain" rect="(142.0, 12.0, 610.0, 72.0)" font-family="Ubuntu" font-size="16">Local Search Algorithm with Customized Single-Objective Problem</text>
	</annotations>
	<thumbnail />
	<node_properties>
		<properties node_id="0" format="literal">{'controlAreaVisible': True, 'max_evaluations': 100, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x02|\x00\x00\x01v\x00\x00\x03\x84\x00\x00\x02\x81\x00\x00\x02|\x00\x00\x01\x92\x00\x00\x03\x84\x00\x00\x02\x81\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x02|\x00\x00\x01\x92\x00\x00\x03\x84\x00\x00\x02\x81', '__version__': 1}</properties>
		<properties node_id="1" format="literal">{'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x00?\x00\x00\x01U\x00\x00\x08\xfe\x00\x00\x021\x00\x00\x00?\x00\x00\x01q\x00\x00\x08\xfe\x00\x00\x021\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x00?\x00\x00\x01q\x00\x00\x08\xfe\x00\x00\x021', '__version__': 1}</properties>
		<properties node_id="2" format="literal">{'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x04\x0b\x00\x00\x01\xd8\x00\x00\x06!\x00\x00\x02\xa6\x00\x00\x04\x0b\x00\x00\x01\xf4\x00\x00\x06!\x00\x00\x02\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x04\x0b\x00\x00\x01\xf4\x00\x00\x06!\x00\x00\x02\xa6', '__version__': 1}</properties>
		<properties node_id="3" format="literal">{'controlAreaVisible': True, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x04\x0b\x00\x00\x01\xd8\x00\x00\x06!\x00\x00\x02\xa6\x00\x00\x04\x0b\x00\x00\x01\xf4\x00\x00\x06!\x00\x00\x02\xa6\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x04\x0b\x00\x00\x01\xf4\x00\x00\x06!\x00\x00\x02\xa6', '__version__': 1}</properties>
		<properties node_id="4" format="literal">{'controlAreaVisible': True, 'currentScriptIndex': 3, 'savedWidgetGeometry': b'\x01\xd9\xd0\xcb\x00\x03\x00\x00\x00\x00\x01T\x00\x00\x00\xc4\x00\x00\x05\x15\x00\x00\x03K\x00\x00\x01^\x00\x00\x00\xea\x00\x00\x05\x0b\x00\x00\x03A\x00\x00\x00\x00\x00\x00\x00\x00\x06@\x00\x00\x01^\x00\x00\x00\xea\x00\x00\x05\x0b\x00\x00\x03A', 'scriptLibrary': [{'name': 'Table from numpy', 'script': 'import numpy as np\nfrom Orange.data import Table, Domain, ContinuousVariable, DiscreteVariable\n\ndomain = Domain([ContinuousVariable("age"),\n                 ContinuousVariable("height"),\n                 DiscreteVariable("gender", values=("M", "F"))])\narr = np.array([\n  [25, 186, 0],\n  [30, 164, 1]])\nout_data = Table.from_numpy(domain, arr)\n', 'filename': None}, {'name': 'customProblemSTemp.py', 'script': "import math\nimport random\n\nfrom jmetal.core.problem import BinaryProblem, FloatProblem\nfrom jmetal.core.solution import BinarySolution, FloatSolution\n\nclass CustomProblem(BinaryProblem):\n\n    def __init__(self, number_of_bits: int = 256):\n        super(CustomProblem, self).__init__()\n        self.number_of_bits = number_of_bits\n        self.number_of_objectives = 1\n        self.number_of_variables = 1\n        self.number_of_constraints = 0\n\n        self.obj_directions = [self.MINIMIZE]\n        self.obj_labels = ['Ones']\n\n    def evaluate(self, solution: BinarySolution) -&gt; BinarySolution:\n        counter_of_ones = 0\n        for bits in solution.variables[0]:\n            if bits:\n                counter_of_ones += 1\n\n        solution.objectives[0] = -1.0 * counter_of_ones\n\n        return solution\n\n    def create_solution(self) -&gt; BinarySolution:\n        new_solution = BinarySolution(number_of_variables=1, number_of_objectives=1)\n        new_solution.variables[0] = \\\n            [True if random.randint(0, 1) == 0 else False for _ in range(self.number_of_bits)]\n        return new_solution\n\n    def get_name(self) -&gt; str:\n        return 'CustomProblem'\n\n\n", 'filename': '/home/pedrozad/Documentos/customProblemSTemp.py'}, {'name': 'New script', 'script': "import math\nimport random\n\nfrom jmetal.core.problem import BinaryProblem, FloatProblem\nfrom jmetal.core.solution import BinarySolution, FloatSolution\n\nclass CustomProblem(BinaryProblem):\n\n    def __init__(self, number_of_bits: int = 256):\n        super(CustomProblem, self).__init__()\n        self.number_of_bits = number_of_bits\n        self.number_of_objectives = 1\n        self.number_of_variables = 1\n        self.number_of_constraints = 0\n\n        self.obj_directions = [self.MINIMIZE]\n        self.obj_labels = ['Ones']\n\n    def evaluate(self, solution: BinarySolution) -&gt; BinarySolution:\n        counter_of_ones = 0\n        for bits in solution.variables[0]:\n            if bits:\n                counter_of_ones += 1\n\n        solution.objectives[0] = -1.0 * counter_of_ones\n\n        return solution\n\n    def create_solution(self) -&gt; BinarySolution:\n        new_solution = BinarySolution(number_of_variables=1, number_of_objectives=1)\n        new_solution.variables[0] = \\\n            [True if random.randint(0, 1) == 0 else False for _ in range(self.number_of_bits)]\n        return new_solution\n\n    def get_name(self) -&gt; str:\n        return 'CustomProblem'\n#\n# Don not modify above this line\n#\nout_problem = CustomProblem(15)\n\n\n\n", 'filename': None}, {'name': 'customProblemSTemp.py', 'script': "import math\nimport random\n\nfrom jmetal.core.problem import BinaryProblem, FloatProblem\nfrom jmetal.core.solution import BinarySolution, FloatSolution\n\nclass CustomProblem(BinaryProblem):\n\n    def __init__(self, number_of_bits: int = 256):\n        super(CustomProblem, self).__init__()\n        self.number_of_bits = number_of_bits\n        self.number_of_objectives = 1\n        self.number_of_variables = 1\n        self.number_of_constraints = 0\n\n        self.obj_directions = [self.MINIMIZE]\n        self.obj_labels = ['Ones']\n\n    def evaluate(self, solution: BinarySolution) -&gt; BinarySolution:\n        counter_of_ones = 0\n        for bits in solution.variables[0]:\n            if bits:\n                counter_of_ones += 1\n\n        solution.objectives[0] = -1.0 * counter_of_ones\n\n        return solution\n\n    def create_solution(self) -&gt; BinarySolution:\n        new_solution = BinarySolution(number_of_variables=1, number_of_objectives=1)\n        new_solution.variables[0] = \\\n            [True if random.randint(0, 1) == 0 else False for _ in range(self.number_of_bits)]\n        return new_solution\n\n    def get_name(self) -&gt; str:\n        return 'CustomProblem'\n#\n# Don not modify above this line\n#\nout_problem = CustomProblem()\n", 'filename': '/home/pedrozad/Documentos/customProblemSTemp.py'}], 'scriptText': "import math\nimport random\n\nfrom jmetal.core.problem import BinaryProblem, FloatProblem\nfrom jmetal.core.solution import BinarySolution, FloatSolution\n\nclass CustomProblem(BinaryProblem):\n\n    def __init__(self, number_of_bits: int = 256):\n        super(CustomProblem, self).__init__()\n        self.number_of_bits = number_of_bits\n        self.number_of_objectives = 1\n        self.number_of_variables = 1\n        self.number_of_constraints = 0\n\n        self.obj_directions = [self.MINIMIZE]\n        self.obj_labels = ['Ones']\n\n    def evaluate(self, solution: BinarySolution) -&gt; BinarySolution:\n        counter_of_ones = 0\n        for bits in solution.variables[0]:\n            if bits:\n                counter_of_ones += 1\n\n        solution.objectives[0] = -1.0 * counter_of_ones\n\n        return solution\n\n    def create_solution(self) -&gt; BinarySolution:\n        new_solution = BinarySolution(number_of_variables=1, number_of_objectives=1)\n        new_solution.variables[0] = \\\n            [True if random.randint(0, 1) == 0 else False for _ in range(self.number_of_bits)]\n        return new_solution\n\n    def get_name(self) -&gt; str:\n        return 'CustomProblem'\n#\n# Don not modify above this line\n#\nout_problem = CustomProblem()\n", 'splitterState': b'\x00\x00\x00\xff\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00h\x00\x00\x00h\x01\xff\xff\xff\xff\x01\x00\x00\x00\x02\x00', '__version__': 2}</properties>
	</node_properties>
	<session_state>
		<window_groups />
	</session_state>
</scheme>
